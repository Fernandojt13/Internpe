# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13CIULpDV2cMG_TlLEPwvBml-156sokNS
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

!pip install google.colab
from google.colab import files
uploaded = files.upload()

dataset = pd.read_csv('diabetes.csv')
# printing the first 5 rows of the dataset
dataset.head()

# number of rows and Columns in this dataset
dataset.shape

# getting the statistical measures of the data
dataset.describe()

dataset['Outcome'].value_counts()

# separating the data and labels
X = dataset.drop(columns = 'Outcome', axis=1)
Y = dataset['Outcome']
print(X)

print(Y)

X = standardized_data
Y = dataset['Outcome']
print(X)
print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)
print(X.shape, X_train.shape, X_test.shape)

scaler = StandardScaler()
scaler.fit(X)
standardized_data = scaler.transform(X)
print(standardized_data)

X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

classifier = svm.SVC(kernel='linear')
#training the support vector Machine Classifier
classifier.fit(X_train, Y_train)
# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy score of the test data : ', test_data_accuracy)

def read_values():
  age = float(input('Enter age: '))
  glucose = float(input('Enter glucose: '))
  bmi = float(input('Enter BMI value: '))
  pregnancies = float(input('Enter no of pregnancies: '))
  bp=float(input('Enter blood pressure: '))
  st=float(input('Enter skin thickness: '))
  insulin=float(input('Enter insulin: '))
  dpf=float(input('Enter diabetes pedigree function: '))
  return np.array([[age, glucose, bmi, pregnancies,bp,st,insulin,dpf]])

test = read_values()
test_scaled = scaler.transform(test)
output = classifier.predict(test_scaled)
if output == 1:
  print("Person has diabetes")
else:
  print("Person does not have diabetes")