# -*- coding: utf-8 -*-
"""CarPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10N6UHXmNJlSWVpU8sfqI0e-LSFo596bu
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer

car = pd.read_csv('/content/car data.csv')
car.head()

car.shape

car.info()

car=car[car['year'].str.isnumeric()]
car['year']=car['year'].astype(int)
car=car[car['Price']!='Ask For Price']
car['Price']=car['Price'].str.replace(',','').astype(int)
car['kms_driven']=car['kms_driven'].str.split().str.get(0).str.replace(',','')
car=car[car['kms_driven'].str.isnumeric()]
car['kms_driven']=car['kms_driven'].astype(int)
car=car[~car['fuel_type'].isna()]
car['name']=car['name'].str.split().str.slice(start=0,stop=3).str.join(' ')
car=car.reset_index(drop=True)
car

X = car_dataset.drop(['name','Price'],axis=1)
Y = car_dataset['Price']
print(X)

print(Y)

plt.subplots(figsize=(15,7))
ax=sns.boxplot(x='company',y='Price',data=car)
ax.set_xticklabels(ax.get_xticklabels(),rotation=40,ha='right')
plt.show()

plt.subplots(figsize=(20,10))
ax=sns.swarmplot(x='year',y='Price',data=car)
ax.set_xticklabels(ax.get_xticklabels(),rotation=40,ha='right')
plt.show()

sns.relplot(x='kms_driven',y='Price',data=car,height=7,aspect=1.5)

plt.subplots(figsize=(14,7))
sns.boxplot(x='fuel_type',y='Price',data=car)

ax=sns.relplot(x='company',y='Price',data=car,hue='fuel_type',size='year',height=7,aspect=2)
ax.set_xticklabels(rotation=40,ha='right')

X=car[['name','company','year','kms_driven','fuel_type']]
y=car['Price']
X

X = car.dropna(subset=['name','company','year','kms_driven','fuel_type', 'Price'])
y = X['Price']
X = X.drop('Price', axis=1)
X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size = 0.1, random_state=2)

categorical_cols = ['name', 'company', 'fuel_type']
transformer = ColumnTransformer(
    transformers=[('onehot', OneHotEncoder(handle_unknown='ignore'), categorical_cols)],
    remainder='passthrough'
)
X_train_transformed = transformer.fit_transform(X_train)
X_test_transformed = transformer.transform(X_test)
lin_reg_model.fit(X_train_transformed, Y_train)
training_data_prediction = lin_reg_model.predict(X_train_transformed)
error_score = metrics.r2_score(Y_train, training_data_prediction)
print("R squared Error : ", error_score)

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title(" Actual Prices vs Predicted Prices")
plt.show()