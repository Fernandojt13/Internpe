# -*- coding: utf-8 -*-
"""Breast Cancer Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I0uZ0SRhyX47cp08N0kdYgT-RS9v3DCl
"""

import numpy as np
import pandas as pd
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer
import warnings
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt

df = pd.read_csv('/content/data.csv')

print(df)

print(df.head())

print(df.tail())

print(df.shape)

print(df.describe())

data = df.dropna(axis=1, how='all')
labels = data['diagnosis'].apply(lambda x: 1 if x == 'M' else 0)
features = data.drop(columns=['diagnosis'])

imputer = SimpleImputer(strategy='mean')
features_imputed = imputer.fit_transform(features)

scaler = StandardScaler()
features_scaled = scaler.fit_transform(features_imputed)

X_train, X_test, y_train, y_test = train_test_split(features_scaled, labels, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=10000)
with warnings.catch_warnings():
    warnings.simplefilter("ignore", category=UserWarning)
    model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f'Model Accuracy: {accuracy:.2f}')
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

def visualize_data(data, index, labels, predictions):
    row_data = data[index]
    label = labels.iloc[index]
    predicted_label = predictions[index]
    print(f'Features: {row_data}')
    print(f'True Label: {label}, Predicted Label: {predicted_label}')
    print('---')
for i in range(5):
    visualize_data(X_test, i, y_test.reset_index(drop=True), y_pred)

plt.figure(figsize=(10, 6))
plt.scatter(range(len(y_test)), y_test, color='blue', alpha=0.6, label='Actual Values')
plt.scatter(range(len(y_pred)), y_pred, color='red', alpha=0.6, label='Predicted Values')
plt.xlabel('Index')
plt.ylabel('Cancer Presence (1 = Malignant, 0 = Benign)')
plt.title('Predicted vs Actual Values')
plt.legend()
plt.show()